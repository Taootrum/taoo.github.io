<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Ld</title><url>/ld/ld/</url><categories><category>arm linker</category></categories><tags><tag>linker</tag><tag>record</tag></tags><content type="html">记录arm 链接脚本语法知识
gcc linker语法知识 ALIGN &amp;amp; SUBALIGN区别 ALIGN vs SUBALIGN in linker scripts 官方文档解释 ALIGN是将输出段对齐 SUBALIGN是将输出段中的输入段强制对齐，并且优先级高于ALIGN 实例代码： ALIGN将.hb_module输出段对齐到0x8 SUBALIGN将输入段(hb_module_HB_DDRI在.hb_module段中)对齐到0x10 &amp;gt; NOTE: ALIGN需要写在:前面，才会是预期的效果，否则会和SUBALIGN效果一样</content></entry><entry><title>Shell</title><url>/shell/shell/</url><categories><category>shell</category></categories><tags><tag>shell</tag><tag>record</tag></tags><content type="html"><![CDATA[shell相关知识记录
Shell 显示文件某一行或几行内容 linux中怎么用shell显示文件某一行或几行内容 sed命令
sed -n &#39;xp&#39; filename # 显示文件X行命令 sed -n &#39;x,yp&#39; filename #显示文件X行到Y行的内容 tail显示监控文件输出 tail -f Shell 一些用法 抓取命令行数据 有时候需要抓取命令行上提供的所有参数。这时候不需要先用$#变量来判断命令行上有多少参数，然后再进行遍历，你可以使用一组其他的特殊变量来解决这个问题。 $*和$@变量可以用来轻松访问所有的参数。这两个变量都能够在单个变量中存储所有的命令行参数。 $*变量会将命令行上提供的所有参数当作一个单词保存。这个单词包含了命令行中出现的每一个参数值。基本上$*变量会将这些参数视为一个整体，而不是多个个体。 另一方面，$@变量会将命令行上提供的所有参数当作同一字符串中的多个独立的单词。这样你就能够遍历所有的参数值，得到每个参数。这通常通过for命令完成
引用变量表示数字是多少进制 2#表示二进制, 8#表示八进制, 10#表示十进制，16#表示十六进制
a=09 echo $((10#$a + 1)) 延申 value too great for base (error token is &ldquo;09&rdquo;)报错 0开头的数字表示八进制，在数学运算中，例如09会被当成八进制，但是9超过了八，所以会导致这个错误
环境变量 BASH_SOURCE: 含有shell中已声明函数所在源文件名的数组 # 解释：BASH_SOURCE是一个数组，包含源文件名，BASH_SOURCE[0]是当前脚本文件，BASH_SOURCE[1]是父脚本文件，BASH_SOURCE[2]是父父脚本文件,.... # 类似调用的关系 PWD: 含有当前工作目录绝对路径 shell 为数组添加元素 Shell数组添加元素注意事项 STATIC_LIB_TARGET+=(&#34;$new_tar&#34;) shell默认值设置 # 两种方式 # ${var:-DEFAULT} If var not set or is empty, evaluate expression as $DEFAULT ${var:-DEFAULT} # ${var=DEFAULT} If var not set, evaluate expression as $DEFAULT ${var=DEFAULT} shell管道符 管道符两边的命令优先级？ mkdir -p ana/test | cd ana/test ====&gt; 看起来右边的命令先执行，优先级更高
]]></content></entry><entry><title>Git</title><url>/git/git/</url><categories><category>git</category></categories><tags><tag>git</tag><tag>record</tag></tags><content type="html"><![CDATA[git相关知识记录
GIT记录 git添加commit msg 通过命令添加
git config commit.template &lt;msg_file&gt; git 添加commit msg 检查 通过hook来实现，在.git/hooks目录下有很多文件，其中commit-smg.sample文件实现对commit msg检查，具体可看该文件的说明
git hooks怎么提交到库中提供给所有人使用 git hooks本地脚本如何push到远程 目前使用的是软链接+环境安装脚本方式来实现
将.git/hooks软链接到库中的目录达到目的 git commit msg检查失败后，重新git commit如何继续之前的内容 How can I recover the commit message when the git commit-msg hook fails? 从上面的链接上使用了alias来实现：
git config alias.recommit &#39;commit --edit --file=.git/COMMIT_EDITMSG&#39; Git subtree的使用 git subtree 简单使用记录 https://linux.cn/article-12244-1.html https://www.cnblogs.com/AhuntSun-blog/p/12736934.html git 的 subtree 是一种复用源代码的方式，可以让多个仓库引用某个仓库的代码，也可以将仓库中的某个目录拆分成一个子仓库以供其他仓库使用
以下步骤不会产生.gittrees文件, 未找到自动生成.gittrees文件的用法，从官方文档看，似乎不会产生这个文件 subtree 添加 # 添加子库的远程地址 git remote add &lt;subtree-name&gt; &lt;url&gt; git remote add subtree@Cpp git@github.com:Taootrum/CPP_Study.git # 这里subtree@Cpp 就代表了git地址 # 建立连接关系 git subtree add --prefix=&lt;dir&gt; &lt;url&gt; &lt;branch&gt; git subtree add --prefix=taoo/running/test/Cpp git@github.com:Taootrum/CPP_Study.git master 拉取更新 subtree git subtree pull --prefix=&lt;dir&gt; &lt;usl&gt; &lt;branch&gt; 删除 subtree 直接删除 &lt;dir&gt; 目录，将删除操作提交即可
推送subtree的更新 git subtree push --prefix=&lt;dir&gt; &lt;url&gt; &lt;branch&gt; ]]></content></entry><entry><title>Armv8</title><url>/arm/armv8/</url><categories><category>arm</category></categories><tags><tag>arm</tag><tag>record</tag></tags><content type="html">armv8相关知识
ARMv8 带你了解ARMv8-AArch64简介(超详细) Cortex-A78 如何判断当前是处于Aarch64 还是Aarch32状态？ ARMv8的两种执行状态： AArch64/AArch32 what is the current execution mode/exception level, etc? 目前看到的是：没有直接寄存器查询当前是Aarch64 还是Aarch32,而是在编译阶段就确定得.
编译阶段即指定使用的是Aarch64还是Aarch32指令集 目前使用的交叉编译器aarch64-linux-gnu-即编译出Aarch64指令集得二进制程序
获取当前处理器状态 对于Aarch64, 可以从Pstate寄存器获取一些状态
对于Aarch32，和armv7架构一样，从CPSR寄存器获取</content></entry><entry><title>Yaml</title><url>/study/yaml/</url><categories><category>Study</category></categories><tags><tag>Yaml</tag><tag>Study</tag></tags><content type="html"><![CDATA[Yaml 语法学习记录
Yaml语法学习 记录Yaml的语法，为工具开发做准备
基本介绍 YAML:&ldquo;Yet Another Markup Language&rdquo;(仍是一种标记语言),YAML 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。
==使用空白符号缩进和大量依赖外观的特色==，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲,YAML 的配置文件后缀为 `.yml yaml文件是一种配置文件类型，相比较ini，conf配置文件来说，更加的简洁，操作也更加简单，同时可以存放不同类型的数据，不会改变原有数据类型，所有的数据类型在读取时都会原样输出 基本语法 大小写敏感 使用缩进表示层级关系 缩进不允许使用tab，只允许空格 缩进的空格数不重要，只要相同层级的元素左对齐即可 &lsquo;#&lsquo;表示注释 数据类型 YAML 支持以下几种数据类型：
对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary） 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list） 纯量（scalars）：单个的、不可再分的值 对象 对象键值对使用冒号结构表示 key: value，冒号后面要加一个空格. 也可以使用 key:{key1: value1, key2: value2, ...} 还可以使用缩进表示层级关系
key: child-key: value child-key2: value2 复杂的对象格式，可以使用问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value：
# 即对象的属性是一个数组 [complexkey1,complexkey2]，对应的值也是一个数组 [complexvalue1,complexvalue2] ? - complexkey1 - complexkey2 : - complexvalue1 - complexvalue2 数组 以 - 开头的行表示构成一个数组：
# 意思是companies属性对应的值是一个数组，每一个数组元素又是由 id、name、price 三个属性构成 companies: - id: 1 name: company1 price: 200W - id: 2 name: company2 price: 500W 纯量 纯量是最基本的，不可再分的值，包括：
字符串 布尔值 整数 浮点数 Null: 可以使用~/None表示null 时间 日期 boolean: - TRUE #true,True都可以 - FALSE #false，False都可以 float: - 3.14 - 6.8523015e+5 #可以使用科学计数法 int: - 123 - 0b1010_0111_0100_1010_1110 #二进制表示 null: nodeName: &#39;node&#39; parent: ~ #使用~表示null string: - 哈哈 - &#39;Hello world&#39; #可以使用双引号或者单引号包裹特殊字符 - newline newline2 #字符串可以拆成多行，每一行会被转化成一个空格 date: - 2018-02-17 #日期必须使用ISO 8601格式，即yyyy-MM-dd datetime: - 2018-02-17T15:02:31+08:00 #时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区 引用 &amp; 锚点和 * 别名，可以用来引用. &amp; 用来建立锚点（defaults），&lt;&lt; 表示合并到当前数据，* 用来引用锚点。
defaults: &amp;defaults adapter: postgres host: localhost development: database: myapp_development &lt;&lt;: *defaults test: database: myapp_test &lt;&lt;: *defaults ===&gt;
defaults: adapter: postgres host: localhost development: database: myapp_development adapter: postgres host: localhost test: database: myapp_test adapter: postgres host: localhost 延申 当yaml文件存储多组数据在一个yaml文件中时，需要使用3个横杆---分割 yaml文件使用两个!!号可以对数据进行类型转换 示例: ]]></content></entry><entry><title>个人博客搭建</title><url>/env_setup/blog_setup/</url><categories><category>环境搭建</category></categories><tags><tag>Blog</tag><tag>环境搭建</tag></tags><content type="html"> 记录本人博客搭建以及遇到的问题.
个人博客环境搭建记录 使用hugo搭建, 评论系统使用Giscus &amp;amp; Waline hugo搭建参考 如何利用 GitHub Pages 和 Hugo 轻松搭建个人博客？ 主题
Next 域名购买备案部署上线
域名指南 使用自定义域名来访问GitHub上部署的hugo博客——GitHub Pages icons 图标
icons 问题记录 git 提示报错 这是因为文件/目录存在不同的磁盘上，会导致这个问题
解决方案: Ref env GIT_DISCOVERY_ACROSS_FILESYSTEM=true export GIT_DISCOVERY_ACROSS_FILESYSTEM hugo Markdown引用本地图片 Hugo如何在markdown里引用本地图片 本地Vscode如何也能浏览到？ 目前能想到的是：复制一份到static/imgs, 另外引用图片语法写两次，以此来适配
vercel国内被墙导致Waline评论系统无法工作问题 taoo-blog 参考链接 关于waline国内无法使用的解决方案 （vercel.app国内无法使用问题） 绑定域名 Waline系统的评论如何管理？ &amp;lt;serverURL&amp;gt;/ui 进入后台对评论进行管理 https://comment.taoo.tech/ui 如何增加聊天功能 在网页申请创建聊天室：https://gitter.im/,添加到config.yaml即可
自动化部署博客到Github Pages Hugo使用Github Action自动部署博客到Github Pages 搭建后，总访客数以及总浏览数有几千万问题 目前发现部署在公网上，就不会有这个问题，部署在本地浏览器上，会有这个问题 具体可见Github上我的提问：作者解释了这个问题，以及其他问题得解决： 网站与文章的浏览人数及次数显示不正确问题 #73</content></entry><entry><title>关于 Taoo 博客</title><url>/about.html</url><categories/><tags/><content type="html">Taoo博客旨在记录工作以及学习中所遇到以及总结的问题，以便于未来回顾和反思.</content></entry><entry><title>Markdown 语法支持</title><url>/post/markdown-syntax/</url><categories/><tags/><content type="html"><![CDATA[仅以此篇文章来测试下在 NexT 主题中在通过 Hugo 引擎来建站时，是否支持 Markdown 文件内容中所写的各种语法，并展示下实际的效果。
标题样式 让我们从所有可能的标题开始，在 HTML 中 &lt;h1&gt;-&lt;h6&gt;元素分别表示六个不同级别的标题样式，其中 &lt;h1&gt; 为最大标题，&lt;h6&gt;为最小标题，效果如下：
标题 1 标题 2 标题 3 标题 4 标题 5 标题 6 段落格式 根据 W3C 定义的 HTML5 规范 ，HTML 文档由元素和文本组成。每个元素的组成都由一个 开始标记 表示，例如： &lt;body&gt; ，和 结束标记 表示，例如： &lt;/body&gt; 。（某些开始标记和结束标记在某些情况下可以省略，并由其他标记暗示。） 元素可以具有属性，这些属性控制元素的工作方式。例如：超链接是使用 a 元素及其 href 属性形成的。
Markdown 语法 ![图像说明](图像地址) HTML IMG 标签 &lt;img src=&#34;图像地址&#34; width=&#34;宽度&#34; height=&#34;高度&#34; /&gt; SVG 格式 &lt;svg&gt;xxxxxx&lt;/svg&gt; 列表类型 有序列表 第一个元素 第二个元素 第三个元素 无序列表 列表元素 另一个元素 和其它元素 嵌套列表 借助 HTML 的 ul 元素来实现。
第一项 第二项 第二项第一个子项目 第二项第二个子项目 第二项第二分项第一分项 第二项第二分项第二分项 第二项第二分项第三分项 第二项第三个子项目 第二项第三分项第一分项 第二项第三分项第二分项 第二项第三分项第三分项 第三项 自定义列表 通过 HTML 的 dl 元素还支持自定义列表（表格列表）。
Hugo 目录结构 assets config.toml content data theme static Hugo 模板 基础模板 列表模板 单页模板 块引用 blockquote 元素表示从另一个源引用的内容，可以选择引用必须在 footer 或 cite 元素中，也可以选择使用注释和缩写等行内更改。
引用文本 这一行也是同样的引用 同样你也在 blockquote 中使用 Markdown 语法书写
带有引文的 Blockquote 元素效果。
我的目标不是赚大钱,是为了制造好的电脑。当我意识到我可以永远当工程师时，我才创办了这家公司。
— 史蒂夫·沃兹尼亚克 根据 Mozilla 的网站记录，Firefox 1.0 于 2004 年发布，并取得了巨大成功。
表格 表格并不算是 Markdown 的核心要素，但 Hugo 同样支持它。
ID 创建者 模型 年份 1 Honda Accord 2009 2 Toyota Camry 2012 3 Hyundai Elantra 2010 可以使用 : （英文格式冒号）来对表格内容进行对齐。
表格 可以是 很酷 左对齐 居中 右对齐 左对齐 居中 右对齐 左对齐 居中 右对齐 同样也可以在表格中使用 Markdown 语法。
表格 中 使用 Markdown 语法 斜体 粗体 中划线 代码块 Code &lt;!DOCTYPE html&gt; &lt;html lang=&#34;en&#34;&gt; &lt;head&gt; &lt;meta charset=&#34;UTF-8&#34;&gt; &lt;title&gt;Example HTML5 Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Test&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; &lt;!DOCTYPE html&gt; &lt;html lang=&#34;en&#34;&gt; &lt;head&gt; &lt;meta charset=&#34;UTF-8&#34;&gt; &lt;title&gt;Example HTML5 Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Test&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 其它元素： abbr、sub、sup、kbd等等 GIF 是位图图像格式。
H2O
C6H12O6
Xn + Yn = Zn
按X获胜。或按CTRL+ALT+F显示 FPS 计数器。
比特作为信息论中的信息单位，也被称为 shannon ，以信息论领域的创始人 Claude shannon 的名字命名。
参考：
来自 Mainroad 主题的 Basic Elements 内容 ]]></content></entry><entry><title>友情链接</title><url>/flinks.html</url><categories/><tags/><content type="html"></content></entry></search>